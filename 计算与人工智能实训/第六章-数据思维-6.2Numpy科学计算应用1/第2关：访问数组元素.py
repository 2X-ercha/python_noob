'''
为了完成本关任务，你需要掌握：1.单索引值索引，2. 切片索引， 3.列表索引， 4. 布尔型索引。

单索引值索引
x = np.array([1, 2, 3, 4, 5, 6])
print(x[4])  #一维数组，访问第4个元素（从0开始计数）
输出：

5
下面的代码访问数组x中第1行第2列的元素（从0开始计数）

arr2d = np.array([[1, 2, 3], [4, 5, 6]])
print(arr2d[1, 2])  #等价于print(arr2d[1][2])
print(arr2d[1])   #数组子集（也是视图）
输出：

6
[4 5 6]
切片索引
数组切片是原始数组的视图
视图上的任何修改都会直接反应到源数组

arr = np.arange(10)
arr_slice = arr[5:8]  #获得一个视图而不是新的数组
arr_slice[1] = 32
print(arr)
输出：

[ 0  1  2  3  4  5 32  7  8  9]
arr2d = np.array([[1, 2, 3], [4, 5, 6],[7,8,9]])
print(arr2d[:2])  #在轴0上切片
print(arr2d[:2, 1:])  #在轴0和轴1上切片
输出：

[[1 2 3]
 [4 5 6]]
[[2 3]
 [5 6]]
索引与切片组合
arr2d = np.array([[1, 2, 3], [4, 5, 6]])
print(arr2d[1, :2])  #轴0选第一行，然后在轴1上切片
print(arr2d[:, 1]) #轴0全选，然后选取第1列
输出：

[4 5]
[2 5]
列表索引
arr2d = np.linspace(1, 100,12).reshape(4,3)
print(arr2d[[2,0,1]]) #依次选取轴0的2,0,1行
print(arr2d[:,[2,0]]) #依次选取轴1的2,0列
输出：

[[55. 64. 73.]
 [ 1. 10. 19.]
 [28. 37. 46.]]
[[ 19.   1.]
 [ 46.  28.]
 [ 73.  55.]
 [100.  82.]]
注意：列表索引（花式索引）获得的是新数组，不是视图

布尔型索引
arr2d = np.array([[1, -2, 3], [-4, 5, 6]])
print(arr2d<0)   #arr2d<0  是个布尔型数组
print(arr2d[arr2d<0])  #用布尔型数组来索引
arr2d[arr2d<0]=0  # 赋值
print(arr2d)
输出：

[[False  True False]
 [ True False False]]
[-2 -4]
[[1 0 3]
 [0 5 6]]
'''

import numpy as np


# 注意，以下对行号和列号的描述都从0开始，例如，最开始的行是第0行
def func1(arr):
    ########## begin ##########
    # 请在此填写代码，返回数组arr的第0行、最后一列的元素值
    return arr[0][-1]
    ########## end ##########


def func2(arr):
    ########## begin ##########
    # 请在此填写代码，对数组arr，去掉前面2行，并依次选取第2,0,1列，最后返回索引结果
    return arr[2:,[2,0,1]]
    ########## end ##########

def func3(arr):
    ########## begin ##########
    # 请在此填写代码，对数组arr, 依次选取第2,0行，并去掉最后一列，最后返回索引结果
    return arr[[2,0],:-1]
    ########## end ##########

def func4(arr):
    ########## begin ##########
    # 请在此填写代码，将数组arr中的偶数替换成原数的平方,函数无返回值
    arr[arr%2==0]**=2
    return arr
    ########## end ##########


arr = np.linspace(10,30,16)
arr = arr.reshape(4,4)
print(arr)
print(func1(arr))
print(func2(arr))
print(func3(arr))
print(func4(arr))